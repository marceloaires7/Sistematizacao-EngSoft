# Generated by Django 5.2.6 on 2025-09-18 18:05

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Quarto",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "numero",
                    models.PositiveIntegerField(
                        help_text="Número único que identifica o quarto.", unique=True
                    ),
                ),
                (
                    "tipo",
                    models.CharField(
                        choices=[
                            ("SOLTEIRO", "Solteiro"),
                            ("CASAL", "Casal"),
                            ("LUXO", "Luxo"),
                        ],
                        help_text="Categoria do quarto (Solteiro, Casal, etc.).",
                        max_length=20,
                    ),
                ),
                (
                    "disponivel",
                    models.BooleanField(
                        default=True,
                        help_text="Indica se o quarto está disponível para novas reservas.",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Usuario",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "tipo_usuario",
                    models.CharField(
                        choices=[
                            ("HOSPEDE", "Hóspede"),
                            ("FUNCIONARIO", "Funcionário"),
                        ],
                        default="HOSPEDE",
                        help_text="Define o papel do usuário no sistema (Hóspede ou Funcionário).",
                        max_length=20,
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Reserva",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "data_checkin",
                    models.DateField(help_text="Data de início da hospedagem."),
                ),
                (
                    "data_checkout",
                    models.DateField(help_text="Data de término da hospedagem."),
                ),
                ("data_criacao", models.DateTimeField(auto_now_add=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("CONFIRMADO", "Confirmado"),
                            ("CANCELADO", "Cancelado"),
                            ("CONCLUIDO", "Concluído"),
                        ],
                        default="CONFIRMADO",
                        max_length=20,
                    ),
                ),
                (
                    "hospede",
                    models.ForeignKey(
                        help_text="O hóspede que realizou a reserva.",
                        limit_choices_to={"tipo_usuario": "HOSPEDE"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reservas",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "quarto",
                    models.ForeignKey(
                        help_text="O quarto que foi reservado.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reservas",
                        to="hotel.quarto",
                    ),
                ),
            ],
        ),
    ]
